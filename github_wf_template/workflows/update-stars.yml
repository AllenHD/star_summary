name: Update Starred Projects

on:
  schedule:
    - cron: '0 6 * * *'  # 每天早上6点运行
  workflow_dispatch:  # 手动触发
  push:
    branches: [ main ]
    paths:
      - 'src/**'
      - 'config.yaml'
      - 'requirements.txt'
      - '.github/workflows/update-stars.yml'

jobs:
  update-stars:
    runs-on: ubuntu-latest
    
    permissions:
      contents: write  # 允许写入仓库内容
      
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        cache: 'pip'
        cache-dependency-path: 'requirements.txt'
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -e .
        
    - name: Verify installation
      run: |
        echo "Checking Python environment:"
        python --version
        pip --version
        echo "Checking installed packages:"
        pip list | grep -E "(github|click|jinja2|yaml)" || echo "Some packages may not be installed"
        echo "Checking CLI commands:"
        star-summary --version || echo "Version command not available"
        echo "Checking system status:"
        star-summary status || echo "Status command failed"
        
    - name: Run star summary with error handling
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        echo "Starting star summary generation..."
        mkdir -p output
        
        # 使用主CLI的verbose选项和generate子命令
        star-summary --verbose generate --format both --output output
        
        echo "✅ Star summary generation completed successfully"
        
    - name: Debug environment
      if: failure()
      run: |
        echo "=== Debug Information ==="
        echo "Current directory:"
        pwd
        echo "Directory contents:"
        ls -la
        echo "Python path:"
        python -c "import sys; print('\n'.join(sys.path))"
        echo "Environment variables:"
        env | grep -E "(GITHUB|PYTHON|PATH)" | head -10
        echo "Output directory:"
        ls -la output/ || echo "Output directory not found"
        echo "=== End Debug Information ==="
        
    - name: Verify output files
      run: |
        echo "Generated files:"
        ls -la output/
        echo "Checking file contents:"
        if [ -f "output/README.md" ]; then
          echo "✅ README.md exists ($(wc -l < output/README.md) lines)"
        else
          echo "❌ README.md missing"
        fi
        if [ -f "output/starred_repos.json" ]; then
          echo "✅ starred_repos.json exists ($(wc -l < output/starred_repos.json) lines)"
        else
          echo "❌ starred_repos.json missing"
        fi
        
    - name: Check for changes
      id: changes
      run: |
        # 确保output目录存在
        mkdir -p output
        
        # 添加output目录到git跟踪（如果是新文件）
        git add output/ || true
        
        # 检查是否有变更
        if [ ! -d "output" ] || [ -z "$(ls -A output 2>/dev/null)" ]; then
          echo "has_changes=false" >> $GITHUB_OUTPUT
          echo "❌ No output files generated"
        elif git diff --cached --quiet && git diff --quiet HEAD -- output/ 2>/dev/null; then
          echo "has_changes=false" >> $GITHUB_OUTPUT
          echo "ℹ️ No changes detected in output directory"
        else
          echo "has_changes=true" >> $GITHUB_OUTPUT
          echo "✅ Changes detected in output directory"
          echo "Changed files:"
          git status --porcelain output/ || echo "New files in output directory"
        fi
        
    - name: Commit and push changes
      if: steps.changes.outputs.has_changes == 'true'
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        
        # 添加所有输出文件
        git add output/
        
        # 检查是否真的有变更要提交
        if git diff --cached --quiet; then
          echo "No changes to commit after staging"
        else
          git commit -m "Auto-update starred projects [$(date '+%Y-%m-%d %H:%M UTC')]"
          git push
          echo "Changes committed and pushed successfully"
        fi
        
    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: star-summary-output
        path: output/
        retention-days: 7
        
    - name: Create summary (on manual trigger)
      if: github.event_name == 'workflow_dispatch'
      run: |
        echo "Manual trigger completed successfully"
        echo "Generated files:" 
        ls -la output/
        echo "Commit SHA: ${{ github.sha }}"
        echo "Run number: ${{ github.run_number }}"

  # 可选：部署到GitHub Pages
  deploy-pages:
    runs-on: ubuntu-latest
    needs: update-stars
    if: github.ref == 'refs/heads/main'
    
    permissions:
      contents: read
      pages: write
      id-token: write
      
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Download artifacts
      uses: actions/download-artifact@v4
      with:
        name: star-summary-output
        path: output/
        
    - name: Setup Pages
      uses: actions/configure-pages@v4
      
    - name: Upload to GitHub Pages
      uses: actions/upload-pages-artifact@v3
      with:
        path: output/
        
    - name: Deploy to GitHub Pages
      id: deployment
      uses: actions/deploy-pages@v4
